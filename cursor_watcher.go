package main

import (
	"fmt"
	"time"

	"github.com/go-vgo/robotgo"
)

// CursorWatcher –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
type CursorWatcher struct {
	isRunning   bool
	checkMillis int
	targetX     int
	targetY     int
}

// NewCursorWatcher —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CursorWatcher
func NewCursorWatcher(checkMillis int, startX, startY int) *CursorWatcher {
	return &CursorWatcher{
		isRunning:   false,
		checkMillis: checkMillis,
		targetX:     startX,
		targetY:     startY,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
func (cw *CursorWatcher) Start() {
	if cw.isRunning {
		fmt.Println("–ö—É—Ä—Å–æ—Ä —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!")
		return
	}

	cw.isRunning = true
	fmt.Println("üî• –ó–∞–ø—É—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞!")

	go func() {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
		robotgo.MoveMouse(cw.targetX, cw.targetY)
		fmt.Printf("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—Å–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: (%d, %d)\n", cw.targetX, cw.targetY)

		checkInterval := time.Duration(cw.checkMillis) * time.Millisecond

		for cw.isRunning {
			currentX, currentY := robotgo.GetMousePos()
			if currentX != cw.targetX || currentY != cw.targetY {
				fmt.Printf("üö® –ö—É—Ä—Å–æ—Ä —Å–¥–≤–∏–Ω—É–ª—Å—è! –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: (%d, %d)\n", currentX, currentY)
				cw.targetX, cw.targetY = currentX, currentY // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
				onCursorMoved(fmt.Sprintf("–ö—É—Ä—Å–æ—Ä —Å–¥–≤–∏–Ω—É–ª—Å—è! –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: (%d, %d)", currentX, currentY))
			}
			time.Sleep(checkInterval)
		}
	}()
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
func (cw *CursorWatcher) Stop() {
	if !cw.isRunning {
		fmt.Println("–ö—É—Ä—Å–æ—Ä –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!")
		return
	}

	cw.isRunning = false
	fmt.Println("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
}
